import magic
import os

from checks.base import Checker
from problem import Problem, Severity
from util import walk_directory

class AutotoolsChecker(Checker):
    def _check_string(self, file: str, match: str) -> bool:
        with open(file, "rb") as suspect:
            return match.encode("utf-8") in suspect.read()

    def execute(self, file: str) -> Problem | None:
        basename = os.path.basename(file)
        if basename.startswith("Makefile") or self.deep:
            if self._check_string(file, "generated by automake"):
                return Problem(Severity.ERROR, "file generated by automake")
        if basename == "configure" or self.deep:
            if self._check_string(file, "Generated by GNU Autoconf"):
                return Problem(Severity.ERROR, "file generated by autoconf")
        if basename == "aclocal.m4" or self.deep:
            if self._check_string(file, "generated automatically by aclocal"):
                return Problem(Severity.ERROR, "file generated by aclocal")
        if basename == "config.h.in":
            return Problem(Severity.WARN, "file probably generated by autoheader")
        return None
